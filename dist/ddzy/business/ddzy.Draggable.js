var Draggable=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r={invariant:function(e,t){if(e)throw new TypeError("Ddzy's plugin error: ".concat(t))},convertHumpToHyphen:function(e){return e.replace(/[A-Z]+/,function(e){return"-".concat(e.toLowerCase())})}};function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={getEle:function(e){return document.querySelector(e)},getAllEle:function(e){return document.querySelectorAll(e)},setAttr:function(e,t){for(var n in t)e.setAttribute(n,t[n]);return this},setCss:function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];e.style.cssText+="".concat(n,": ").concat(r,";")}return this},getAttr:function(e,t){return e.getAttribute(t)},addClass:function(e,t){return e&&e.classList.add(t),this},removeClass:function(e,t){return e&&e.classList.remove(t),this},throttle:function(e,t){var n=Date.now();return function(){var r=Date.now();if(r-n>e){for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];t.apply(globalThis,o),n=r}}},isDOM:function(e){return e&&"object"===o(e)&&1===e.nodeType},traversalDOMWithBFS:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=[e];n.length;){var r=n.shift();t&&t(r);var o=r.children;n.push.apply(n,i(Array.from(o)))}},traversalDOMWithDFS:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");t&&t(e),function e(n){if(0===n.length)return;for(var r,i=0;r=n[i++];)t&&t(r),e(r.children)}(e.children)},traversalDOMWithNodeIterator:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=document.createNodeIterator(e,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)t&&t(r)},traversalDOMWithTreeWalker:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)t&&t(r)},convertPairToCSSText:function(e){var t="";for(var n in e){var i=Reflect.get(e,n);t+="".concat(r.convertHumpToHyphen(n),": ").concat(i,"; ")}return t}};function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t&&d(e.prototype,t),n&&d(e,n),e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"dragContainer",document.createElement("ul")),c(this,"dragItems",[document.createElement("li")]),c(this,"origin",document.createElement("div")),c(this,"position",{originBeforeRect:{top:0},originAfterRect:{top:0},targetBeforeRect:{top:0},targetAfterRect:{top:0}}),this.__init__(t)}return l(e,null,[{key:"_aidedFindIndex",value:function(e,t){return e?this._aidedFindIndex(e.previousElementSibling,++t):t}}]),l(e,[{key:"__init__",value:function(e){this._initProps(e),this.render()}},{key:"_initProps",value:function(t){for(var n in t)if(t.hasOwnProperty(n)){var r=Reflect.get(t,n);Reflect.set(e.defaultProps,n,r)}}},{key:"aidedCreateDOM",value:function(){var t=e.defaultProps.dataSource,n="";return t.forEach(function(e,t){n+='\n        <li class="ddzy-drag-list-item ddzy-drag-item-'.concat(t,'">\n          <div class="ddzy-drag-item-title-box">\n            <div class="ddzy-drag-item-title">\n              ').concat(e.titleText,'\n            </div>\n          </div>\n          <div class="ddzy-drag-item-content-box">\n            <div class="ddzy-drag-item-content">\n              ').concat(e.contentText,"\n            </div>\n          </div>\n        </li>\n      ")}),'\n      <div id="ddzy-drag-wrapper">\n        <div class="ddzy-drag-main">\n          <ul class="ddzy-drag-main-list">\n            \x3c!-- TODO: dataSource动态生成 --\x3e\n            '.concat(n,"\n          </ul>\n        </div>\n      </div>\n    ")}},{key:"aidedMountDOM",value:function(t){var n=e.defaultProps.container,r=a.getEle(n);if(!r)throw new TypeError("Please enter an existing selector.");r.innerHTML+=t}},{key:"aidedCreateStyle",value:function(){var t=e.defaultProps,n=t.dragWrapperStyle,r=t.dragOriginStyle,i=t.dragOriginActiveStyle,o=t.dragTargetActiveStyle,d=a.convertPairToCSSText(n),l=a.convertPairToCSSText(r),c=a.convertPairToCSSText(i),s=a.convertPairToCSSText(o);return"\n      body, ul, li {\n        margin: 0;\n        padding: 0;\n      }\n      ul {\n        list-style-type: none;\n      }\n      #ddzy-drag-wrapper div {\n        box-sizing: border-box;\n        overflow: hidden;\n      }\n      #ddzy-drag-wrapper {\n        height: 100%;\n        ".concat(d,"\n      }\n      .ddzy-drag-main {\n        heigth: 100%;\n        padding: 0.625rem;\n      }\n      .ddzy-drag-main-list {\n        display: flex;\n        flex-direction: column;\n      }\n      .ddzy-drag-list-item {\n        /* TODO: 传入配置 - gap */\n        display: flex;\n        flex-direction: row;\n        overflow: hidden;\n        cursor: move;\n        min-height: 2.5rem;\n        margin: 0.5rem 0;\n        background-color: #fff;\n        color: #303133;\n        ").concat(l,"\n        transition: .3s all ease;\n      }\n      .ddzy-drag-item-title-box {\n        flex: 1;\n        background-color: #d50;\n        pointer-events: none;\n      }\n      .ddzy-drag-item-title {\n        height: 100%;\n        line-height: 2.5;\n        color: #fff;\n        text-align: center;\n      }\n      .ddzy-drag-item-title img {\n        display: block;\n        max-width: 100%;\n        height: 100%;\n      }\n      .ddzy-drag-item-content-box {\n        flex: 5;\n        pointer-events: none;\n      }\n      .ddzy-drag-item-content {\n        padding-left: 0.5rem;\n        line-height: 2.5;\n        color: #666;\n      }\n\n      /* Active Classes(Configurations) */\n      .ddzy-drag-origin-active {\n        ").concat(c,"\n      }\n      .ddzy-drag-target-active {\n        ").concat(s,"\n      }\n\n    ")}},{key:"aidedMountStyle",value:function(e){var t=document.querySelector("style");t?t.innerText+="\n        /* Create by SortDraggable */\n        ".concat(e,"\n      "):((t=document.createElement("style")).innerText+=t.innerText+="\n        /* Create by SortDraggable */\n        ".concat(e,"\n      "),document.head.appendChild(t))}},{key:"handleRenderDOM",value:function(){var e=this.aidedCreateDOM();this.aidedMountDOM(e)}},{key:"handleRenderStyle",value:function(){var e=this.aidedCreateStyle();this.aidedMountStyle(e)}},{key:"handleInitDragVarible",value:function(){this.dragContainer=a.getEle(".ddzy-drag-main-list"),this.dragItems=Array.from(a.getAllEle(".ddzy-drag-list-item"))}},{key:"handleDragAnimation",value:function(e){var t=this,n=this.position.originAfterRect.top-this.position.originBeforeRect.top,r=this.position.targetAfterRect.top-this.position.targetBeforeRect.top;a.setCss(this.origin,{transition:"none",transform:"translateY(".concat(-n,"px)")}),a.setCss(e,{transition:"none",transform:"translateY(".concat(-r,"px)")}),a.addClass(e,"ddzy-drag-target-active"),this.position.originBeforeRect=this.position.originAfterRect,setTimeout(function(){a.setCss(t.origin,{transition:"all .3s ease",transform:"translateY(".concat(0,"px)")}),a.setCss(e,{transition:"all .3s ease",transform:"translateY(".concat(0,"px)")})},0)}},{key:"handleDragStart",value:function(e){this.origin=e,this.position.originBeforeRect=this.origin.getBoundingClientRect(),a.addClass(this.origin,"ddzy-drag-origin-active")}},{key:"handleDragEnter",value:function(t){var n=this.dragContainer;this.position.targetBeforeRect=t.getBoundingClientRect();var r=e._aidedFindIndex(this.origin,0);e._aidedFindIndex(t,0)-r>0?n.insertBefore(this.origin,t.nextElementSibling):n.insertBefore(this.origin,t),this.position.originAfterRect=this.origin.getBoundingClientRect(),this.position.targetAfterRect=t.getBoundingClientRect()}},{key:"handleDragLeave",value:function(e){a.removeClass(e,"ddzy-drag-target-active")}},{key:"handleDragOver",value:function(e){e.preventDefault()}},{key:"handleDrop",value:function(){a.removeClass(this.origin,"ddzy-drag-origin-active"),a.removeClass(this.origin,"ddzy-drag-target-active")}},{key:"handleDrag",value:function(){var t=this;this.handleInitDragVarible();var n=this.dragItems,r=e.defaultProps,i=r.animate,o=r.onDragStartHook,d=r.onDragEnterHook,l=r.onDragOverHook,c=r.onDragLeaveHook,s=r.onDropHook;n.forEach(function(e){a.setAttr(e,{draggable:"true"}),e.addEventListener("dragstart",function(){t.handleDragStart(e),o(t.origin)}),e.addEventListener("dragenter",function(){t.handleDragEnter(e),i&&t.handleDragAnimation(e),d(t.origin,e)}),e.addEventListener("dragleave",function(){t.handleDragLeave(e),c(t.origin,e)}),e.addEventListener("dragover",function(n){t.handleDragOver(n),l(t.origin,e)}),e.addEventListener("drop",function(){t.handleDrop(),s(t.origin)})})}},{key:"render",value:function(){this.handleRenderDOM(),this.handleRenderStyle(),this.handleDrag()}}]),e}();c(s,"defaultProps",{container:"body",dataSource:[{titleText:"1",contentText:"第一项的内容"},{titleText:"2",contentText:"第二项的内容"},{titleText:"3",contentText:"第三项的内容"},{titleText:"4",contentText:"第四项的内容"},{titleText:"5",contentText:"第五项的内容"}],dragWrapperStyle:{backgroundColor:"#fff"},dragOriginStyle:{margin:"8px 0",border:"1px solid #ebeef5",borderRadius:"4px",boxShadow:"0 2px 12px 0 rgba(0, 0, 0, .1)"},dragOriginActiveStyle:{boxShadow:"0 2px 12px 0 rgba(0, 0, 0, .4)"},dragTargetActiveStyle:{opacity:".5"},animate:!0,onDragStartHook:function(e){},onDragEnterHook:function(e,t){},onDragLeaveHook:function(e,t){},onDragOverHook:function(e,t){},onDropHook:function(e){}});var u={Sort:s};t.default=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,