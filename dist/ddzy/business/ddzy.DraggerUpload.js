var DraggerUpload=function(n){var e={};function a(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,a),o.l=!0,o.exports}return a.m=n,a.c=e,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)a.d(t,o,function(e){return n[e]}.bind(null,o));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="",a(a.s=0)}([function(n,e,a){"use strict";a.r(e);var t={invariant:function(n,e){if(n)throw new TypeError("Ddzy's plugin error: ".concat(e))},convertHumpToHyphen:function(n){return n.replace(/[A-Z]+/,function(n){return"-".concat(n.toLowerCase())})}};function o(n){return function(n){if(Array.isArray(n)){for(var e=0,a=new Array(n.length);e<n.length;e++)a[e]=n[e];return a}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function d(n){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var r={getEle:function(n){return document.querySelector(n)},getAllEle:function(n){return document.querySelectorAll(n)},setAttr:function(n,e){for(var a in e)n.setAttribute(a,e[a]);return this},setCss:function(n,e){for(var a in e)if(e.hasOwnProperty(a)){var t=e[a];n.style.cssText+="".concat(a,": ").concat(t,";")}return this},getAttr:function(n,e){return n.getAttribute(e)},addClass:function(n,e){return n&&n.classList.add(e),this},removeClass:function(n,e){return n&&n.classList.remove(e),this},throttle:function(n,e){var a=Date.now();return function(){var t=Date.now();if(t-a>n){for(var o=arguments.length,d=new Array(o),r=0;r<o;r++)d[r]=arguments[r];e.apply(globalThis,d),a=t}}},isDOM:function(n){return n&&"object"===d(n)&&1===n.nodeType},traversalDOMWithBFS:function(n,e){if(!this.isDOM(n))throw new TypeError("Require a DOM element");for(var a=[n];a.length;){var t=a.shift();e&&e(t);var d=t.children;a.push.apply(a,o(Array.from(d)))}},traversalDOMWithDFS:function(n,e){if(!this.isDOM(n))throw new TypeError("Require a DOM element");e&&e(n),function n(a){if(0===a.length)return;for(var t,o=0;t=a[o++];)e&&e(t),n(t.children)}(n.children)},traversalDOMWithNodeIterator:function(n,e){if(!this.isDOM(n))throw new TypeError("Require a DOM element");for(var a=document.createNodeIterator(n,NodeFilter.SHOW_ELEMENT),t=null;t=a.nextNode();)e&&e(t)},traversalDOMWithTreeWalker:function(n,e){if(!this.isDOM(n))throw new TypeError("Require a DOM element");for(var a=document.createTreeWalker(n,NodeFilter.SHOW_ELEMENT),t=null;t=a.nextNode();)e&&e(t)},convertPairToCSSText:function(n){var e="";for(var a in n){var o=Reflect.get(n,a);e+="".concat(t.convertHumpToHyphen(a),": ").concat(o,"; ")}return e},_querySelector:function(n){var e=n.match(/^(?:#([a-zA-Z]+))|(?:\.(\w+))|([a-z]+)$/);return e?e[1]?document.getElementById(e[1]):e[2]?document.getElementsByClassName(e[2])[0]||null:document.getElementsByTagName(e[3])[0]||null:null}};function i(n,e){for(var a=0;a<e.length;a++){var t=e[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function l(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}var s=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),l(this,"state",{files:[],oContainer:document.createElement("div"),oLabel:document.createElement("label"),oInput:document.createElement("input"),oShowList:document.createElement("ul")}),this.__init__(e)}var e,a,t;return e=n,(a=[{key:"__init__",value:function(n){this._initProps(n),this._initDOM(),this._initStyle(),this._initCommonEle(),this.handleDragUpload(),this.handleClickUpload()}},{key:"_initProps",value:function(e){for(var a in e)if(e.hasOwnProperty(a)){var t=Reflect.get(e,a);Reflect.set(n.defaultProps,a,t)}}},{key:"_initDOM",value:function(){this.handleMountDOM(this.handleCreateDOM())}},{key:"_initStyle",value:function(){this.handleMountStyle(this.handleCreateStyle())}},{key:"_initCommonEle",value:function(){var n=r.getEle(".ddzy-upload-drag-container"),e=r.getEle(".ddzy-upload-drag-main-content"),a=r.getEle(".ddzy-upload-drag-main-input"),t=r.getEle(".ddzy-upload-show-list");this.state.oContainer=n,this.state.oLabel=e,this.state.oInput=a,this.state.oShowList=t}},{key:"handleCreateDOM",value:function(){return'\n      <div id="ddzy-upload-wrapper">\n        <div class="ddzy-upload-main">\n          \x3c!-- 拖拽容器 --\x3e\n          <div class="ddzy-upload-drag-container" draggable="true">\n            <div class="ddzy-upload-drag-main">\n              <input id="ddzy-upload-drag-main-input" class="ddzy-upload-drag-main-input" type="file" multiple="true" accept="image/jpg, image/jpeg, image/gif, image/png, image/ico" style="display: none;" />\n\n              <label for="ddzy-upload-drag-main-input" class="ddzy-upload-drag-main-content">\n                <div class="ddzy-upload-drag-icon-box">\n                  <svg class="icon" aria-hidden="true">\n                    <use xlink:href="#icon-upload"></use>\n                  </svg>\n                </div>\n                <div class="ddzy-upload-drag-title-box">\n                  <h3>Click or Drag to upload</h3>\n                </div>\n                <div class="ddzy-upload-drag-description-box">\n                  <p>Support mutiple files but only image</p>\n                </div>\n              </label>\n            </div>\n          </div>\n          \x3c!-- 文件列表 --\x3e\n          <div class="ddzy-upload-show-container">\n            <div class="ddzy-upload-show-content">\n              <ul class="ddzy-upload-show-list">\n\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    '}},{key:"handleMountDOM",value:function(e){var a=n.defaultProps.container,t=r.getEle(a);if(!t)throw new TypeError("Please enter an existing selector.");t.innerHTML+=e}},{key:"handleCreateStyle",value:function(){return"\n      body, ul, li, p, h3 {\n        margin: 0;\n        padding: 0;\n      }\n      ul {\n        list-style-type: none;\n      }\n      label {\n        display: block;\n        cursor: pointer;\n      }\n\n      #ddzy-upload-wrapper {\n        height: 100%;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-main {\n        height: 100%;\n        user-select: none;\n        cursor: pointer;\n      }\n\n\n      /* 拖拽上传部分 */\n      #ddzy-upload-wrapper .ddzy-upload-drag-container {\n        border: 1px dashed #ccc;\n        background-color: #f9f9f9;\n        cursor: pointer;\n        transition: all .3s ease;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-container:hover {\n        border-color: #1890ff;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-main {\n        pointer-events: none;\n      }\n\n      #ddzy-upload-wrapper .ddzy-upload-drag-main-content {\n        padding: 0.5rem;\n        text-align: center;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-icon-box {\n        margin-top: 0.5rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-title-box {\n        margin-top: 1.375rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-description-box {\n        margin-top: 0.625rem;\n        margin-bottom: 1rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-icon-box svg {\n        color: #1890ff;\n        min-width: 2.5rem;\n        min-height: 2.5rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-title-box h3 {\n        color: #888;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-drag-description-box p {\n        color: #999;\n        font-size: 0.875rem;\n      }\n\n\n      /* 文件列表部分 */\n      #ddzy-upload-wrapper .ddzy-upload-show-container {\n        margin-top: 0.5rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-content {\n\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-list {\n\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-item {\n        display: flex;\n        margin-top: 0.5rem;\n        padding: 0.25rem 0.5rem;\n        border: 1px solid #ddd;\n        color: #666;\n        transition: all .3s ease;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-item:hover {\n        background-color: #f3f4f5;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-item svg:hover {\n        color: #1890ff;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-box {\n        flex: 8;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action {\n\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action > span {\n        display: inline-block;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-preview {\n        margin-left: 0.5rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-send {\n        margin-left: 0.25rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-name {\n        margin-left: 1rem;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-loading {\n\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-close-box {\n        flex: 1;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-close {\n        text-align: right;\n      }\n\n      /* Animation */\n      @keyframes showItemLoading {\n        0% {\n          transform: rotate(0);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n\n      /* Active classes */\n      #ddzy-upload-wrapper .ddzy-upload-drag-container-active {\n        border-color: #1890ff;\n        filter: blur(1px);\n      }\n\n      #ddzy-upload-wrapper .ddzy-upload-show-item-in-animate {\n        transition: none;\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      #ddzy-upload-wrapper .ddzy-upload-show-item-out-animate {\n        transform: translateX(-100%);\n        opacity: 0;\n      }\n\n      #ddzy-upload-wrapper .ddzy-upload-show-action-loading-active {\n        animation: showItemLoading .5s linear infinite;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-loading-success {\n        animation: none;\n        color: #52c41a;\n      }\n      #ddzy-upload-wrapper .ddzy-upload-show-action-loading-faild {\n        animation: none;\n        color: #f5222d;\n      }\n\n    "}},{key:"handleMountStyle",value:function(n){var e=document.querySelector("style");e?e.innerText+="\n        /* Create by DraggerUpload */\n        ".concat(n,"\n      "):((e=document.createElement("style")).innerText+=e.innerText+="\n        /* Create by DraggerUpload */\n        ".concat(n,"\n      "),document.head.appendChild(e))}},{key:"handleDragEnter",value:function(){var n=this.state.oContainer;r.addClass(n,"ddzy-upload-drag-container-active")}},{key:"handleDragLeave",value:function(){var n=this.state.oContainer;r.removeClass(n,"ddzy-upload-drag-container-active")}},{key:"handleLocalItemAnimateIn",value:function(){var n=r.getAllEle(".ddzy-upload-show-item"),e=n[n.length-1];Array.from(n).forEach(function(n){n===e?r.addClass(n,"ddzy-upload-show-item-in-animate"):r.removeClass(n,"ddzy-upload-show-item-in-animate")}),setTimeout(function(){r.removeClass(e,"ddzy-upload-show-item-in-animate")},0)}},{key:"handleLocalItemAnimateOut",value:function(n){var e=this.state.oShowList;r.addClass(n,"ddzy-upload-show-item-out-animate"),setTimeout(function(){e.removeChild(n)},300)}},{key:"handleLocalItemRemove",value:function(){var e=this,a=r.getAllEle(".ddzy-upload-show-item"),t=n.defaultProps.onRemoveClickHook,o=this.state.files;Array.from(a).forEach(function(n){n.getElementsByClassName("ddzy-upload-show-close")[0].firstElementChild.addEventListener("click",function(){var a=Number(r.getAttr(n,"data-index")),d=o[a];t&&t(d,o),e.handleLocalItemAnimateOut(n)})})}},{key:"handleLocalItemPreview",value:function(){var e=r.getAllEle(".ddzy-upload-show-item"),a=this.state.files,t=n.defaultProps.onPreviewClickHook;Array.from(e).forEach(function(n){n.getElementsByClassName("ddzy-upload-show-action-preview")[0].addEventListener("click",function(){var e=Number(r.getAttr(n,"data-index")),o=a[e];t&&t(o,a)})})}},{key:"handleLocalItemSendSuccess",value:function(e,a,t){var o=n.defaultProps.onUploadClickSuccessHook,d=e.getElementsByClassName("ddzy-upload-show-action-loading")[0];r.addClass(d,"ddzy-upload-show-action-loading-success"),o&&o(a,t)}},{key:"handleLocalItemSendFaild",value:function(e,a,t){var o=n.defaultProps.onUploadClickFailHook,d=e.getElementsByClassName("ddzy-upload-show-action-loading")[0];r.addClass(d,"ddzy-upload-show-action-loading-faild"),o&&o(a,t)}},{key:"handleLocalItemSend",value:function(){var e=this,a=r.getAllEle(".ddzy-upload-show-item"),t=this.state.files,o=n.defaultProps.onUploadClickHook;Array.from(a).forEach(function(n){var a=n.getElementsByClassName("ddzy-upload-show-action-send")[0].firstElementChild,d=n.getElementsByClassName("ddzy-upload-show-action-loading")[0];a.addEventListener("click",function(){var a=Number(r.getAttr(n,"data-index")),i=t[a];if(r.addClass(d,"ddzy-upload-show-action-loading-active"),o){var l=o(i,t);l instanceof Promise?l.then(function(){e.handleLocalItemSendSuccess(n,i,t)}).catch(function(){e.handleLocalItemSendFaild(n,i,t)}):l?e.handleLocalItemSendSuccess(n,i,t):e.handleLocalItemSendFaild(n,i,t)}})})}},{key:"handleLocalItem",value:function(){this.handleLocalItemAnimateIn(),this.handleLocalItemRemove(),this.handleLocalItemPreview(),this.handleLocalItemSend()}},{key:"handleAppendToShow",value:function(n){var e=this.state.oShowList,a=n.name,t='\n      <li class="ddzy-upload-show-item" data-index='.concat(e.children.length,'>\n        <div class="ddzy-upload-show-action-box">\n          <div class="ddzy-upload-show-action">\n            <span class="ddzy-upload-show-action-loading">\n              <svg class="icon" aria-hidden="true" data-index=').concat(e.children.length,'>\n                <use xlink:href="#icon-Loading"></use>\n              </svg>\n            </span>\n            <span class="ddzy-upload-show-action-name" title="图片名称">\n              ').concat(a,'\n            </span>\n            <span class="ddzy-upload-show-action-preview" title="预览">\n              <svg class="icon" aria-hidden="true" data-index=').concat(e.children.length,'>\n                <use xlink:href="#icon-eye"></use>\n              </svg>\n            </span>\n            <span class="ddzy-upload-show-action-send" title="上传">\n              <svg class="icon" aria-hidden="true" data-index=').concat(e.children.length,'>\n                <use xlink:href="#icon-upload1"></use>\n              </svg>\n            </span>\n          </div>\n        </div>\n        <div class="ddzy-upload-show-close-box">\n          <div class="ddzy-upload-show-close" title="移除">\n            <svg class="icon" aria-hidden="true" data-index=').concat(e.children.length,'>\n              <use  xlink:href="#icon-et-wrong"></use>\n            </svg>\n          </div>\n        </div>\n      </li>\n    ');e.innerHTML+=t,this.handleLocalItem()}},{key:"handleAppendToFiles",value:function(n){this.state.files.push(n)}},{key:"handleBeforeUploadHook",value:function(e,a){var t=this,o=n.defaultProps.onBeforeUploadHook;if(o){var d=o(e,Array.from(a));d instanceof Promise?d.then(function(n){n instanceof File?(t.handleAppendToFiles(n),t.handleAppendToShow(n)):(t.handleAppendToFiles(e),t.handleAppendToShow(e))}).catch(function(){}):d&&(this.handleAppendToFiles(e),this.handleAppendToShow(e))}else this.handleAppendToFiles(e),this.handleAppendToShow(e)}},{key:"handleDrop",value:function(e){var a=this,t=n.defaultProps.onChangeHook,o=this.state.oContainer,d=e.dataTransfer;t&&t(e),r.removeClass(o,"ddzy-upload-drag-container-active"),Array.from(d.files).forEach(function(n){a.handleBeforeUploadHook(n,d.files)})}},{key:"handleChange",value:function(e){var a=this,t=n.defaultProps.onChangeHook,o=e.target.files;t&&t(e),Array.from(o).forEach(function(n){a.handleBeforeUploadHook(n,o)})}},{key:"handleDragUpload",value:function(){var n=this,e=this.state.oContainer;document.addEventListener("dragover",function(n){n.preventDefault()}),document.addEventListener("drop",function(n){n.preventDefault()}),e.addEventListener("dragenter",function(){n.handleDragEnter()}),e.addEventListener("dragleave",function(){n.handleDragLeave()}),e.addEventListener("drop",function(e){n.handleDrop(e)})}},{key:"handleClickUpload",value:function(){var n=this,e=this.state,a=e.oContainer,t=e.oLabel,o=e.oInput;a.addEventListener("mouseup",function(){t.click()}),o.addEventListener("change",function(e){n.handleChange(e)})}}])&&i(e.prototype,a),t&&i(e,t),n}();l(s,"defaultProps",{container:"body"});var u={Dragger:s};e.default=u.Dragger}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,