var ColorfulBubble=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.default=r.ColorfulBubble},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(2)),a=n(3),u=function(){function e(t){this.el=document.createElement("canvas"),this.pen=this.el.getContext("2d"),this.bubbleArr=[],this.mousePoint={x:e.defaultConfig.cvsWidth&&2*e.defaultConfig.cvsWidth,y:e.defaultConfig.cvsHeight&&2*e.defaultConfig.cvsHeight},this.__init__(t)}return e.prototype.__init__=function(e){this._initConfig(e),this._initCanvas(),this.render()},e.prototype._initConfig=function(t){for(var n in t){var r=Reflect.get(t,n);Reflect.set(e.defaultConfig,n,r)}},e.prototype._initCanvas=function(){this._initCanvasElAndPen(),this._initCanvasDefaultStyle()},e.prototype._initCanvasElAndPen=function(){var t=e.defaultConfig.container;if(!t)throw new TypeError("Please enter an valid container 游냥游냥游냥");var n=o.default.getEle(t);if(!n||1!==n.nodeType||"canvas"!==n.localName)throw new Error("Please enter an valid container 游냥游냥游냥");this.el=n,this.pen=this.el.getContext("2d")},e.prototype._initCanvasDefaultStyle=function(){var t=this.el,n=e.defaultConfig,r=n.cvsBgColor,i=n.cvsWidth,a=n.cvsHeight;o.default.setCss(t,{display:"block","background-color":r}),o.default.setAttr(t,{width:i,height:a})},e.prototype.handleCreateBubble=function(){var t=e.defaultConfig,n=new a.Bubble(r({},t,{pen:this.pen,mousePoint:this.mousePoint}));this.bubbleArr.push(n),n.draw()},e.prototype.handleMoveBubble=function(){var t=this,n=e.defaultConfig,r=n.cvsWidth,i=n.cvsHeight;this.pen.clearRect(0,0,r,i),this.bubbleArr.forEach(function(e){e.move(),e.draw()}),window.requestAnimationFrame(function(){t.handleMoveBubble()})},e.prototype.handleStretchBubbleByMouse=function(){var t=this,n=e.defaultConfig,r=n.cvsWidth,i=n.cvsHeight;this.el.addEventListener("mousemove",function(e){t.mousePoint.x=e.clientX,t.mousePoint.y=e.clientY}),this.el.addEventListener("mouseleave",function(){t.mousePoint.x=2*r,t.mousePoint.y=2*i})},e.prototype.render=function(){for(var t=e.defaultConfig,n=t.bubbleNum,r=t.allowMouse,i=0;i<n;i++)this.handleCreateBubble();this.handleMoveBubble(),r&&this.handleStretchBubbleByMouse()},e.defaultConfig={container:"body",cvsWidth:500,cvsHeight:500,cvsBgColor:"#000",bubbleNum:20,bubbleScaleRange:{min:3,max:5},bubbleExpandRange:50,bubbleOpacity:1,bubbleSpeed:1,bubbleColorArr:["#1890ff","#f5222d","#fa8c16","#faad14","#fadb14","#a0d911","#52c41a","#13c2c2","#2f5418","#722ed1","#eb2f96","#fa541c"],allowMouse:!0},e}();t.ColorfulBubble=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={getEle:function(e){return document.querySelector(e)},getAllEle:function(e){return document.querySelectorAll(e)},setAttr:function(e,t){for(var n in t)e.setAttribute(n,t[n]);return this},setCss:function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];e.style.cssText+=n+": "+r+";"}return this},getFullRandom:function(e,t){return~~(Math.random()*(t-e)+e)},getAnyRandom:function(e,t){return Math.random()*(t-e)+e},getRadian:function(e){return Math.PI/180*e},getAttr:function(e,t){return e.getAttribute(t)},addClass:function(e,t){return e&&e.classList.add(t),this},removeClass:function(e,t){return e&&e.classList.remove(t),this},throttle:function(e,t){var n=Date.now();return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var o=Date.now();o-n>e&&(t.apply(globalThis,r),n=o)}},isDOM:function(e){return e&&"object"==typeof e&&1===e.nodeType},isFunction:function(e){return"function"==typeof e},traversalDOMWithBFS:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=[e];n.length;){var r=n.shift();t&&t(r);var i=r.children;n.push.apply(n,Array.from(i))}},traversalDOMWithDFS:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");t&&t(e),function e(n){if(0===n.length)return;for(var r=0,i=void 0;i=n[r++];)t&&t(i),e(i.children)}(e.children)},traversalDOMWithNodeIterator:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=document.createNodeIterator(e,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)t&&t(r)},traversalDOMWithTreeWalker:function(e,t){if(!this.isDOM(e))throw new TypeError("Require a DOM element");for(var n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)t&&t(r)}};t.default=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4)),o=function(){function e(t){var n=t.pen,r=t.cvsWidth,o=t.cvsHeight,a=t.bubbleSpeed,u=t.bubbleColorArr,l=t.bubbleScaleRange,s=t.bubbleOpacity,c=t.bubbleExpandRange,f=t.mousePoint;this.pen=n,this.cvsWidth=r,this.cvsHeight=o,this.centerPoint={x:i.default.getAnyRandom(0,r),y:i.default.getAnyRandom(0,o)},this.distance={x:i.default.getAnyRandom(-a,a),y:i.default.getAnyRandom(-a,a)},this.color=u[i.default.getFullRandom(0,u.length)],this.radius=i.default.getAnyRandom(l&&l.min,l&&l.max),this.opacity=s,e.BUBBLE_INITIAL_RADIUS=this.radius,this.bubbleExpandRange=c,this.mousePoint=f}return e.prototype.draw=function(){var e=this,t=e.pen,n=e.centerPoint,r=e.color,o=e.radius,a=e.opacity;t.save(),t.beginPath(),t.globalAlpha=a,t.fillStyle=r,t.arc(n.x,n.y,o,0,i.default.getRadian(360)),t.fill(),t.closePath(),t.restore()},e.prototype.move=function(){var t=this,n=t.cvsWidth,r=t.cvsHeight,i=t.mousePoint,o=t.bubbleExpandRange,a=t.centerPoint,u=t.distance,l=t.radius,s=Math.pow(a.x-i.x,2),c=Math.pow(a.y-i.y,2),f=Math.pow(s+c,.5);a.x+=u.x,a.y+=u.y,this.distance.x=a.x<l||a.x>n-l?-this.distance.x:this.distance.x,this.distance.y=a.y<l||a.y>r-l?-this.distance.y:this.distance.y,f<=o?this.radius+=1:f>o&&this.radius>e.BUBBLE_INITIAL_RADIUS&&(this.radius-=1)},e}();t.Bubble=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={getFullRandom:function(e,t){return~~(Math.random()*(t-e)+e)},getAnyRandom:function(e,t){return Math.random()*(t-e)+e},getRadian:function(e){return Math.PI/180*e}};t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,