var StarsLine=function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={getEle:function(t){return document.querySelector(t)},getAllEle:function(t){return document.querySelectorAll(t)},setAttr:function(t,e){for(var n in e)t.setAttribute(n,e[n]);return this},setCss:function(t,e){for(var n in e)if(e.hasOwnProperty(n)){var i=e[n];t.style.cssText+=n+": "+i+";"}return this},getFullRandom:function(t,e){return~~(Math.random()*(e-t)+t)},getAnyRandom:function(t,e){return Math.random()*(e-t)+t},getRadian:function(t){return Math.PI/180*t},getAttr:function(t,e){return t.getAttribute(e)},addClass:function(t,e){return t&&t.classList.add(e),this},removeClass:function(t,e){return t&&t.classList.remove(e),this},throttle:function(t,e){var n=Date.now();return function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];var o=Date.now();o-n>t&&(e.apply(globalThis,i),n=o)}},isDOM:function(t){return t&&"object"==typeof t&&1===t.nodeType},isFunction:function(t){return"function"==typeof t},traversalDOMWithBFS:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=[t];n.length;){var i=n.shift();e&&e(i);var r=i.children;n.push.apply(n,Array.from(r))}},traversalDOMWithDFS:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");e&&e(t),function t(n){if(0===n.length)return;for(var i=0,r=void 0;r=n[i++];)e&&e(r),t(r.children)}(t.children)},traversalDOMWithNodeIterator:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=document.createNodeIterator(t,NodeFilter.SHOW_ELEMENT),i=null;i=n.nextNode();)e&&e(i)},traversalDOMWithTreeWalker:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT),i=null;i=n.nextNode();)e&&e(i)}};e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2);e.default=i.StarsLine},function(t,e,n){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(0)),o=n(3),a=i(n(5)),l=function(){function t(t){this.el=document.createElement("canvas"),this.pen=this.el.getContext("2d"),this.mousePoint={x:0,y:0},this.ballArr=[],this.flag=!0,this.__init__(t)}return t.prototype.__init__=function(t){this._initConfig(t),this._initCanvas(),this.render()},t.prototype._initConfig=function(e){for(var n in e)if(e.hasOwnProperty(n)){var i=Reflect.get(e,n);Reflect.set(t.defaultConfig,n,i)}},t.prototype._initCanvas=function(){this._initCanvasElAndPen(),this._initCanvasDefaultStyle()},t.prototype._initCanvasElAndPen=function(){var e=t.defaultConfig.container;if(!e)throw new TypeError("Please enter an valid container...");var n=r.default.getEle(e);if(!n||1!==n.nodeType||"canvas"!==n.localName)throw new Error("Please enter an valid container...");this.el=n,this.pen=this.el.getContext("2d")},t.prototype._initCanvasDefaultStyle=function(){var e=this.el,n=t.defaultConfig,i=n.cvsBgColor,o=n.cvsWidth,a=n.cvsHeight;r.default.setCss(e,{display:"block","background-color":i}),r.default.setAttr(e,{width:o,height:a})},t.prototype.aidedCreateBall=function(){var e=this.pen,n=this.ballArr,i=t.defaultConfig,r=i.cvsWidth,l=i.cvsHeight,s=i.ballColor,u=i.ballRadius,d=i.ballSpeed,c=i.safeDistance,f=i.lineColor,h=i.lineWidth,v=new o.Ball({pen:e,color:s||"rgba(24,144,255, "+a.default.getAnyRandom(0,1)+")",radius:a.default.getAnyRandom(u.min,u.max),speed:d,cvsWidth:r,cvsHeight:l,ballArr:n,safeDistance:c,lineColor:f||"rgba(238, 238, 238, "+a.default.getAnyRandom(0,1)+")",lineWidth:h,centerPoint:{x:a.default.getAnyRandom(0,r),y:a.default.getAnyRandom(0,l)}});this.ballArr.push(v),v.draw()},t.prototype.aidedMoveBallByMouse=function(){var e=this,n=this.el,i=this.mousePoint;t.defaultConfig.allowMouse&&n.addEventListener("mousemove",function(t){e.flag=!0,i.x=t.clientX,i.y=t.clientY},!1)},t.prototype.aidedMoveBallArr=function(){var e=this,n=this.flag,i=this.ballArr,r=t.defaultConfig,o=r.cvsWidth,a=r.cvsHeight;this.pen.clearRect(0,0,o,a);for(var l=0,s=i;l<s.length;l++){var u=s[l];u.move(),u.draw(),u.drawLine(!n&&u)}this.flag=!1,window.requestAnimationFrame(function(){e.aidedMoveBallArr()})},t.prototype.handleCreateBall=function(){for(var e=t.defaultConfig.ballNum,n=0;n<e;n++)this.aidedCreateBall()},t.prototype.handleMoveBall=function(){this.aidedMoveBallByMouse(),this.aidedMoveBallArr()},t.prototype.render=function(){this.handleCreateBall(),this.handleMoveBall()},t.defaultConfig={container:"body",cvsWidth:500,cvsHeight:500,cvsBgColor:"#000",ballNum:50,ballRadius:{min:1,max:2},allowMouse:!1,lineColor:"",lineWidth:1,ballSpeed:1,ballColor:"",safeDistance:50},t}();e.StarsLine=l},function(t,e,n){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(0)),o=n(4),a=function(){function t(t){var e=t.pen,n=t.color,i=t.radius,o=t.speed,a=t.cvsWidth,l=t.cvsHeight,s=t.ballArr,u=t.safeDistance,d=t.lineWidth,c=t.lineColor,f=t.centerPoint;this.pen=e,this.color=n,this.radius=i,this.speed=o,this.centerPoint=f,this.lineWidth=d,this.lineColor=c,this.distance={x:r.default.getAnyRandom(-this.speed,this.speed),y:r.default.getAnyRandom(-this.speed,this.speed)},this.cvsWidth=a,this.cvsHeight=l,this.ballArr=s,this.safeDistance=u}return t.prototype.draw=function(){var t=this.pen,e=this.centerPoint,n=this.color,i=this.radius;t.save(),t.beginPath(),t.fillStyle=n,t.arc(e.x,e.y,i,0,r.default.getRadian(360)),t.fill(),t.closePath(),t.restore()},t.prototype.move=function(){var t=this.distance,e=this.centerPoint,n=this.cvsWidth,i=this.cvsHeight;e.x+=t.x,e.y+=t.y,t.x=e.x>n||e.x<0?-t.x:t.x,t.y=e.y>i||e.y<0?-t.y:t.y},t.prototype.drawLine=function(t){var e=this,n=e.ballArr,i=e.safeDistance,r=e.pen,a=e.lineColor,l=e.lineWidth;if(t)for(var s=0,u=n;s<u.length;s++){var d=u[s];t!==d&&Math.sqrt(Math.pow(t.centerPoint.x-d.centerPoint.x,2)+Math.pow(t.centerPoint.y-d.centerPoint.y,2))<i&&new o.Line({lineColor:a,lineWidth:l,startPoint:{x:t.centerPoint.x,y:t.centerPoint.y},endPoint:{x:d.centerPoint.x,y:d.centerPoint.y},pen:r})}},t}();e.Ball=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){var e=t.startPoint,n=t.endPoint,i=t.lineColor,r=t.lineWidth,o=t.pen;this.startPoint=e,this.endPoint=n,this.lineColor=i,this.lineWidth=r,this.pen=o,this.draw()}return t.prototype.draw=function(){var t=this,e=t.pen,n=t.startPoint,i=t.endPoint,r=t.lineColor,o=t.lineWidth;e.save(),e.beginPath(),e.moveTo(n.x,n.y),e.lineTo(i.x,i.y),e.lineCap="round",e.lineWidth=o,e.strokeStyle="#1890ff",e.strokeStyle=r,e.stroke(),e.closePath(),e.restore()},t}();e.Line=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={getFullRandom:function(t,e){return~~(Math.random()*(e-t)+t)},getAnyRandom:function(t,e){return Math.random()*(e-t)+t},getRadian:function(t){return Math.PI/180*t}};e.default=i}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,