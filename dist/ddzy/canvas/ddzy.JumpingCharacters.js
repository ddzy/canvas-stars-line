var JumpingCharacters=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1);e.default=r.JumpingCharacters},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=i(n(2)),o=i(n(3)),l=n(4),s=function(){function t(t){this.el=document.createElement("canvas"),this.pen=this.el.getContext("2d"),this.mousePoint={x:0,y:0},this.saveCharactersArr=[],this.timer=0,this.__init__(t)}return t.prototype.__init__=function(t){this._initConfig(t),this._initCanvas(),this.render()},t.prototype._initConfig=function(e){for(var n in e)if(e.hasOwnProperty(n)){var r=Reflect.get(e,n);Reflect.set(t.defaultConfig,n,r)}},t.prototype._initCanvas=function(){this._initCanvasElAndPen(),this._initCanvasDefaultStyle()},t.prototype._initCanvasElAndPen=function(){var e=t.defaultConfig.container;if(!e)throw new TypeError("Please enter an valid container...");var n=a.default.getEle(e);if(!n||1!==n.nodeType||"canvas"!==n.localName)throw new Error("Please enter an valid container...");this.el=n,this.pen=this.el.getContext("2d")},t.prototype._initCanvasDefaultStyle=function(){var e=this.el,n=t.defaultConfig,r=n.cvsBgColor,i=n.cvsWidth,o=n.cvsHeight;a.default.setCss(e,{display:"block","background-color":r}),a.default.setAttr(e,{width:i,height:o})},t.prototype.aidedHandleTick=function(){var e=this.pen,n=this.saveCharactersArr,r=t.defaultConfig,i=r.cvsWidth,a=r.cvsHeight;e.clearRect(0,0,i,a);for(var o=0,l=n;o<l.length;o++){var s=l[o];s.handleDraw(),s.handleMove()}},t.prototype.aidedHandleCancelTimer=function(){clearInterval(this.timer)},t.prototype.handleCreateCharacter=function(){var e=this.pen,n=this.saveCharactersArr,i=this.mousePoint,a=this.aidedHandleCancelTimer,s=t.defaultConfig,u=s.text,c=s.textColor,f=new l.Character(r({},s,{text:u[o.default.getFullRandom(0,u.length)],textColor:c[o.default.getFullRandom(0,c.length)],pen:e,mousePoint:i,handleCancelTimer:a}));n[0]=f},t.prototype.handleAnimateCharacter=function(){var t=this;this.aidedHandleCancelTimer(),this.timer=setInterval(function(){t.aidedHandleTick()},1e3/60)},t.prototype.render=function(){var t=this,e=this.el,n=this.mousePoint;e.addEventListener("click",function(e){n.x=e.clientX,n.y=e.clientY,t.handleCreateCharacter(),t.handleAnimateCharacter()},!1)},t.defaultConfig={container:"body",cvsWidth:500,cvsHeight:500,cvsBgColor:"#000",text:["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],textColor:["#1890ff","#f5222d","#fa8c16","#faad14","#fadb14","#a0d911","#52c41a","#13c2c2","#2f5418","#722ed1","#eb2f96","#fa541c"],textSize:16,safeDistance:20,initialOpacity:1,speed:1},t}();e.JumpingCharacters=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={getEle:function(t){return document.querySelector(t)},getAllEle:function(t){return document.querySelectorAll(t)},setAttr:function(t,e){for(var n in e)t.setAttribute(n,e[n]);return this},setCss:function(t,e){for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];t.style.cssText+=n+": "+r+";"}return this},getFullRandom:function(t,e){return~~(Math.random()*(e-t)+t)},getAnyRandom:function(t,e){return Math.random()*(e-t)+t},getRadian:function(t){return Math.PI/180*t},getAttr:function(t,e){return t.getAttribute(e)},addClass:function(t,e){return t&&t.classList.add(e),this},removeClass:function(t,e){return t&&t.classList.remove(e),this},throttle:function(t,e){var n=Date.now();return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var a=Date.now();a-n>t&&(e.apply(globalThis,r),n=a)}},isDOM:function(t){return t&&"object"==typeof t&&1===t.nodeType},isFunction:function(t){return"function"==typeof t},traversalDOMWithBFS:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=[t];n.length;){var r=n.shift();e&&e(r);var i=r.children;n.push.apply(n,Array.from(i))}},traversalDOMWithDFS:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");e&&e(t),function t(n){if(0===n.length)return;for(var r=0,i=void 0;i=n[r++];)e&&e(i),t(i.children)}(t.children)},traversalDOMWithNodeIterator:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=document.createNodeIterator(t,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)e&&e(r)},traversalDOMWithTreeWalker:function(t,e){if(!this.isDOM(t))throw new TypeError("Require a DOM element");for(var n=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT),r=null;r=n.nextNode();)e&&e(r)}};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={getFullRandom:function(t,e){return~~(Math.random()*(e-t)+t)},getAnyRandom:function(t,e){return Math.random()*(e-t)+t},getRadian:function(t){return Math.PI/180*t}};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){var e=t.initialOpacity,n=t.textSize,r=t.textColor,i=t.text,a=t.speed,o=t.safeDistance,l=t.pen,s=t.mousePoint,u=t.handleCancelTimer;this.pen=l,this.text=i,this.textColor=r,this.safeDistance=o,this.mousePoint=s,this.opacity=e,this.textSize=n,this.speed=a,this.handleCancelTimer=u,this.__init__()}return t.prototype.__init__=function(){this.handleDraw()},t.prototype.handleDraw=function(){var t=this,e=t.pen,n=t.text,r=t.textColor,i=t.textSize,a=t.mousePoint;this.opacity<=0&&(this.opacity=0,this.handleCancelTimer()),e.save(),e.beginPath(),e.fillStyle=r,e.font=i+"px 'Fira Code Regular'",e.textAlign="center",e.textBaseline="middle",e.globalAlpha=this.opacity,e.fillText(n,a.x,a.y),e.closePath(),e.restore()},t.prototype.handleMove=function(){this.mousePoint.y-=this.speed,this.opacity-=.01},t}();e.Character=r}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,